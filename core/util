#! /usr/local/bin/bash
dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

sql() {
    mycli -u "$DB_USERNAME" --pass "$DB_PASSWORD" -h "$DB_HOST" -D "$DB_DATABASE" -e "$1"
}

remove_first_line_from_sql_output() {
    echo "$1" | sed -n '1!p' | sed -E "s/\"//g";
}

api_call() {
    #Parameter 1 is URL
    #parameter 2 is Payload
    #Parameter 3 is optional and it's the method
    METHOD=$([ $3 ] && echo $3 || echo POST)\
    
    curl "$1" \
    --insecure \
    --silent \
    --output /dev/null \
    -H 'Accept: application/json, text/plain, */*' \
    -H 'Referer: https://dev.passportcenter.com/checkout/step4' \
    -H 'Origin: https://dev.passportcenter.com' \
    -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36' \
    -H 'Content-Type: application/json;charset=UTF-8' \
    --cookie "$COOKIE" \
    -X "$METHOD" \
    --write-out "Api Call: $METHOD $1 %{http_code}\n" \
    --data-binary $"$2" --compressed
}

get_cookie() {
    if [[ "$1" == "admin" ]]
    then
        EMAIL="$ADMIN_EMAIL"
        PASSWORD="$ADMIN_PASS" # Password coming from .env
    else
        EMAIL="$1"
        PASSWORD="$PASSWORD" # Password coming from .env
    fi
    
    echo "Attempting login with these credentials: $EMAIL $PASSWORD"
    COOKIE_HEADER="$(login '{"email": "'$EMAIL'", "password": "'$PASSWORD'"}' | grep gov_api_session | tr ';' '\n' | grep gov_api_session)"
    SESSION=${COOKIE_HEADER/Set-Cookie: /} # Substitute Set-Cookie for empty
    SESSION=${SESSION/set-cookie: /} # Substitute set-cookie for empty BECAUSE APPARENTLY ON DEV AND LOCAL THE CASING IS DIFFERENT FML
    COOKIE=$SESSION
    echo "Login Cookie: $SESSION"
}

get_lead_uuid() {
    QUERY="SELECT uuid from hot_leads WHERE email = '$1'"
    sql "$QUERY";
}

get_request() {
    curl $1 \
    --cookie $COOKIE \
    -H 'HOST: api.dev.govworks.com' \
    -H 'Connection: close' \
    -H 'User-Agent: Paw/3.1.7 (Macintosh; OS X/10.14.2) GCDHTTPRequest'
}

# LOGIN AND GET COOKIE
login() {
    curl -sD - -o /dev/null "$API_URL/auth/login" \
    -H 'Accept: application/json' \
    -H 'Content-Type: application/json; charset=UTF-8' \
    -H 'Referer: https://dev.passportcenter.com/' \
    -H 'Origin: https://dev.passportcenter.com' \
    --request POST \
    --insecure \
    --data-binary $"$1" --compressed
}

# Magic https://stackoverflow.com/a/449890
set_name() {
    FULLNAME=$(head -$((${RANDOM} % `wc -l < ./data/names.txt` + 1)) ./data/names.txt | tail -1)
    export FIRSTNAME=$(cut -d',' -f1 <<< $FULLNAME )
    export LASTNAME=$(cut -d',' -f2 <<< $FULLNAME )
    export MIDDLENAME=$(cut -d',' -f3 <<< $FULLNAME )
}

set_user_password_to_password() {
    CHANGE_PASSWORD_QUERY="UPDATE users SET password = '\$2y\$10\$D0C7hvq5m5eK.ccKTlIi4.KmrJL7ULj5.SxnGdwv/d/RIWLYqKV4G', new = 0 WHERE email = '$1'"
    sql "$CHANGE_PASSWORD_QUERY"
}

run() {
    /usr/local/bin/bash $ROOT_DIRECTORY/$@
}

random_email() {
    ID="$(printf '%x\n' $(python -c 'from time import time; print int(round(time() * 1000))'))"
    echo "$EMAIL_BASE+$ID@govworks.com"
}

get_product() {
    # $1 is the product

    GET_PRODUCT_QUERY="SELECT uuid FROM products WHERE type = 'passport' AND subtype = '$1'"
    RESPONSE="$(sql "$GET_PRODUCT_QUERY")"
    remove_first_line_from_sql_output "$RESPONSE"
}

get_option() {
    # $1 is the domain
    # $2 is the option
    DATA="$(curl --silent --insecure $API_URL/domains/$1/options)"
    OPTION="$2_service"
    UUID="$(node -e "console.log( JSON.parse('$DATA').data.options.find(obj => obj.internal=='$OPTION').options_uuid );")"
    
    echo "$UUID"
}

get_option_pc() {
    # $1 is the option in slug form. Ex same_day
    get_option 'passportcenter' "$1"
}

get_option_pr() {
    # $1 is the option

    get_option 'passportrenewal' "$1"
}